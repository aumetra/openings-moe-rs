var searchIndex = JSON.parse('{\
"openings_moe":{"doc":"openings.moe API library","t":[5,0,3,12,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12],"n":["all","entity","Song","artist","borrow","borrow_mut","cmp","default","deserialize","details","eq","equivalent","fmt","from","into","list","ne","partial_cmp","serialize","title","try_from","try_into","type_id","Data","Details","Next","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cmp","cmp","cmp","comment","data","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","equivalent","file","fmt","fmt","fmt","from","from","from","hidden","into","into","into","mime","ne","ne","ne","next","partial_cmp","partial_cmp","partial_cmp","path","seed","seed_b","serialize","serialize","serialize","song","strict","subtitles","title","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","videos","Entry","List","borrow","borrow_mut","cmp","default","deserialize","details","eq","equivalent","fmt","from","into","ne","partial_cmp","serialize","song","source","subtitles","try_from","try_into","type_id","uid"],"q":["openings_moe","","openings_moe::entity","","","","","","","","","","","","","","","","","","","","","openings_moe::entity::details","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openings_moe::entity::list","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fetch a list of all openings known to <code>openings.moe</code>","Entities returned by the API","Song information","Artist of the song","","","","","","Entities returned by the details API","","","","","","Entities of the list endpoint","","","","Title of the song","","","","Data field of the details response","Response of the details endpoint","Next field of the details response","","","","","","","","","","Comment or error message","Actual data about the opening","","","","","","","","","","Videoâ€™s filename without an extension","","","","","","","Whether the video is hidden","","","","List of possible encodings","","","","Next data","","","","Path to get the video file(s)","First seed for the RNG","Second seed for the RNG","","","","Song of the opening","Whether strict mode was used","Name of the subtitle group","Title of the video","","","","","","","","","","Return a list of all possible URLs to stream this opening","Entry of the list","Entity returned by loading the data from the list endpoint","","","","","","Get details about the opening (by its UID)","","","","","","","","","Song of the opening","Name of the anime","Creator of the subtitles","","","","Unique ID of the opening"],"i":[0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,2,3,4,2,3,4,2,3,4,3,3,2,3,4,2,3,4,2,3,4,2,2,3,4,2,3,4,2,2,3,4,2,2,3,4,3,2,3,4,2,4,4,2,3,4,2,4,2,2,2,3,4,2,3,4,2,3,4,3,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[[[]],null,null,null,[[]],[[]],[[["song",3]],["ordering",4]],[[],["song",3]],[[],["result",4]],null,[[["song",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["song",3]],["bool",15]],[[["song",3]],["option",4,[["ordering",4]]]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["data",3]],["ordering",4]],[[["details",3]],["ordering",4]],[[["next",3]],["ordering",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["data",3]],["bool",15]],[[["details",3]],["bool",15]],[[["next",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[["data",3]],["bool",15]],[[["details",3]],["bool",15]],[[["next",3]],["bool",15]],null,[[["data",3]],["option",4,[["ordering",4]]]],[[["details",3]],["option",4,[["ordering",4]]]],[[["next",3]],["option",4,[["ordering",4]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["vec",3,[["string",3]]],["fromstrerror",3]]]],null,null,[[]],[[]],[[["entry",3]],["ordering",4]],[[],["entry",3]],[[],["result",4]],[[]],[[["entry",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["entry",3]],["bool",15]],[[["entry",3]],["option",4,[["ordering",4]]]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"Song"],[3,"Data"],[3,"Details"],[3,"Next"],[3,"Entry"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};